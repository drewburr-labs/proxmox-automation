---
# Required vars:
# vms - List of data to create new VMs { name, ip_address, hdd_size, (opt) destination_node }
# pmox_node - Required if unset in `vms`
- hosts: localhost
  connection: local
  gather_facts: false

  tasks:
  - name: Add VM hostname to inventory
    ansible.builtin.add_host:
      hostname: "{{ vm_dns_name }}"
      groups: proxmox_vm
      vm_name: "{{ item.name }}"
      vm_ip_address: "{{ item.ip_address }}"
      vm_hdd_size: "{{ item.hdd_size }}"
      pmox_node: "{{ item.destination_node | default(pmox_node) }}"
    vars:
      vm_name: "{{ item.name }}" # Needed to generate vm_dns_name
    loop: "{{ vms }}"


- hosts: proxmox_vm
  connection: local
  gather_facts: false

  module_defaults:
    community.general.proxmox_kvm:
      proxmox_default_behavior: no_defaults
      api_user: "{{ pmox_user }}"
      api_password: "{{ pmox_password }}"
      api_host: "{{ pmox_url }}"
      node: "{{ pmox_node }}"

  tasks:
    - name: Clone VM
      community.general.proxmox_kvm:
        name: "{{ vm_name }}"
        clone: "{{ template_name }}"
        timeout: 300
      register: clone_result
      tags:
        - create
      throttle: 1 # Clone one host at a time

    - name: Get VM state
      community.general.proxmox_kvm:
        name: "{{ vm_name }}"
        state: current
      register: vm_state
      until:
        - not vm_state.failed

    - ansible.builtin.debug:
        var: vm_state

    - name: Get API ticket
      ansible.builtin.uri:
        url: "https://{{ pmox_url }}:8006/api2/json/access/ticket"
        method: POST
        validate_certs: false
        force_basic_auth: true
        body_format: json
        body:
          username: "{{ pmox_user }}"
          password: "{{ pmox_password }}"
      register: pmox_ticket_request

    - name: Register ticket
      set_fact:
        pmox_ticket: "{{ pmox_ticket_request.json.data.ticket }}"
        pmox_token: "{{ pmox_ticket_request.json.data.CSRFPreventionToken }}"

    - name: Get VM configuration
      ansible.builtin.uri:
        url: "https://{{ pmox_url }}:8006/api2/json/nodes/{{ pmox_node }}/qemu/{{ vm_state.vmid }}/config"
        method: GET
        validate_certs: false
        force_basic_auth: true
        headers:
          Authorization: "PVEAuthCookie={{ pmox_ticket }}"
      register: vm_config

    - name: Register VM MAC address
      set_fact:
        vm_mac_address: "{{ vm_net0.virtio }}"
      vars:
        vm_net0: "{{ vm_config.json.data.net0 | split(',') | map('split', '=') | items2dict(key_name=0, value_name=1) }}"

    - name: Update VM disk space
      ansible.builtin.uri:
        url: "https://{{ pmox_url }}:8006/api2/json/nodes/{{ pmox_node }}/qemu/{{ vm_state.vmid }}/resize"
        method: PUT
        validate_certs: false
        force_basic_auth: true
        headers:
          Authorization: "PVEAuthCookie={{ pmox_ticket }}"
          CSRFPreventionToken: "{{ pmox_token }}"
        body_format: json
        body:
          disk: scsi0
          size: "{{ vm_hdd_size }}"
      when: clone_result is changed

    # - name: Share data with pihole
    #   set_fact:
    #     vm_name: "{{ vm_name }}"
    #     vm_ip_address: "{{ vm_ip_address }}"
    #     vm_mac_address: "{{ vm_mac_address }}"
    #   delegate_to: pihole.drewburr.com
    #   delegate_facts: true

- hosts: proxmox_vm
  gather_facts: false
  tags:
    - always
    - pihole

  tasks:
    - name: Register DNS name
      delegate_to: pihole.drewburr.com
      import_role:
        name: pihole
        tasks_from: dns
      vars:
        state: present
        dns_name: "{{ vm_dns_name }}"
        ip_address: "{{ vm_ip_address }}"

    - name: Register DHCP address
      delegate_to: pihole.drewburr.com
      import_role:
        name: pihole
        tasks_from: dhcp
      vars:
        state: present
        dns_name: "{{ vm_dns_name }}"
        ip_address: "{{ vm_ip_address }}"
        mac_address: "{{ vm_mac_address }}"
        fail_if_found: false

- hosts: proxmox_vm
  connection: local
  gather_facts: false

  module_defaults:
    community.general.proxmox_kvm:
      proxmox_default_behavior: no_defaults
      api_user: "{{ pmox_user }}"
      api_password: "{{ pmox_password }}"
      api_host: "{{ pmox_url }}"
      node: "{{ pmox_node }}"

  tasks:
    - name: Set static IP on VM
      ansible.builtin.uri:
        url: "https://{{ pmox_url }}:8006/api2/json/nodes/{{ pmox_node }}/qemu/{{ vm_state.vmid }}/config"
        method: PUT
        validate_certs: false
        force_basic_auth: true
        headers:
          Authorization: "PVEAuthCookie={{ pmox_ticket }}"
          CSRFPreventionToken: "{{ pmox_token }}"
        body_format: json
        body:
          ipconfig0: "gw={{ ipv4_gateway }},ip={{ vm_ip_address }}/{{ ipv4_cidr }}"

    - name: Start VM
      community.general.proxmox_kvm:
        name: "{{ vm_name }}"
        state: started
        timeout: 300

    - name: Wait until VM is running
      community.general.proxmox_kvm:
        name: "{{ vm_name }}"
        state: current
      register: vm_state
      until:
        - vm_state.status == "running"

- hosts: localhost
  connection: local
  gather_facts: false

  tasks:
    - name: Wait for SSH service to become available
      ansible.builtin.wait_for:
        port: 22
        host: "{{ vm_dns_name }}"
        search_regex: OpenSSH
        delay: 10
      register: ssh_wait_res
      failed_when:
        - ssh_wait_res is failed
      vars:
        vm_name: "{{ item.name }}" # # Needed to generate vm_dns_name
      loop: "{{ vms }}"


- hosts: proxmox_vm
  gather_facts: false

  tasks:
    - name: Install guest agent
      ansible.builtin.apt:
        name: qemu-guest-agent
      become: true
      vars:
        ansible_ssh_common_args: "-o StrictHostKeyChecking=accept-new" # Host is new. Auto-accept key

    - name: Start and enable guest agent
      ansible.builtin.systemd:
        name: qemu-guest-agent
        state: started
        enabled: true
      become: true

    - name: Restart VM
      ansible.builtin.reboot:
