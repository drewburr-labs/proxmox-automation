---
# Required vars:
# vms - List of data to create new VMs { name, ip_address, hdd_size, destination_node }
- hosts: localhost
  connection: local
  gather_facts: false

  tasks:
  - name: Get API ticket
    ansible.builtin.uri:
      url: "https://{{ pmox_url }}:8006/api2/json/access/ticket"
      method: POST
      validate_certs: false
      force_basic_auth: true
      body_format: json
      body:
        username: "{{ pmox_user }}"
        password: "{{ pmox_password }}"
    register: pmox_ticket_request

  - name: Register ticket
    set_fact:
      pmox_ticket: "{{ pmox_ticket_request.json.data.ticket }}"
      pmox_token: "{{ pmox_ticket_request.json.data.CSRFPreventionToken }}"

  - name: Add VM hostname to inventory
    ansible.builtin.add_host:
      hostname: "{{ vm_dns_name }}"
      groups: proxmox_vm
      vm_name: "{{ item.name }}"
      vm_ip_address: "{{ item.ip_address }}"
      vm_hdd_size: "{{ item.hdd_size }}"
      vm_cpu: "{{ item.vm_cpu }}"
      vm_memory_mb: "{{ item.vm_memory_mb }}"
      kube_storage_enabled: "{{ item.kube_storage_enabled }}"
      destination_node: "{{ item.destination_node }}"
      pmox_ticket: "{{ pmox_ticket }}"
      pmox_token: "{{ pmox_token }}"
    vars:
      vm_name: "{{ item.name }}" # Needed to generate vm_dns_name
    loop: "{{ vms }}"
    changed_when: false

- hosts: proxmox_vm
  connection: local
  gather_facts: false

  module_defaults:
    community.general.proxmox_kvm:
      proxmox_default_behavior: no_defaults
      api_user: "{{ pmox_user }}"
      api_password: "{{ pmox_password }}"
      api_host: "{{ pmox_url }}"

    community.general.proxmox_vm_info:
      api_user: "{{ pmox_user }}"
      api_password: "{{ pmox_password }}"
      api_host: "{{ pmox_url }}"

  tasks:
    - name: Get template data
      include_role:
        name: proxmox
        tasks_from: get_vm_config
      vars:
        vm_name: "{{ template_name }}"

    - name: Clone VM
      community.general.proxmox_kvm:
        name: "{{ vm_name }}"
        clone: "{{ template_name }}"
        vmid: "{{ vm_data.vmid }}"
        node: "{{ vm_data.node }}"
        timeout: 300
      register: clone_result
      tags:
        - create
      throttle: 1 # Clone one host at a time

    - name: Migrate VM to destination node
      community.general.proxmox_kvm:
        name: "{{ vm_name }}"
        node: "{{ destination_node }}"
        migrate: true
      register: migrate_vm_result
      until: migrate_vm_result is not failed

    - name: Get VM config
      include_role:
        name: proxmox
        tasks_from: get_vm_config

    - name: Register VM config values
      set_fact:
        vm_scsi0_size: "{{ (vm_config.scsi0 | split('='))[1] }}" # ceph-pool:vm-103-disk-0,size=50G
        vm_scsi1_size: "{{ (vm_config.scsi1 | default('=') | split('='))[1] }}"
        vm_cpu_assigned: "{{ vm_config.cores }}"
        vm_memory_assigned: "{{ vm_config.memory }}"

    - name: Update VM CPU and memory
      ansible.builtin.uri:
        url: "https://{{ pmox_url }}:8006/api2/json/nodes/{{ vm_data.node }}/qemu/{{ vm_data.vmid }}/config"
        method: POST
        validate_certs: false
        force_basic_auth: true
        headers:
          Authorization: "PVEAuthCookie={{ pmox_ticket }}"
          CSRFPreventionToken: "{{ pmox_token }}"
        body_format: json
        body:
          cores: "{{ vm_cpu }}"
          memory: "{{ vm_memory_mb }}"
      changed_when: true
      when: (vm_cpu_assigned != vm_cpu) or (vm_memory_assigned != vm_memory_mb)

    - name: Register VM MAC address
      set_fact:
        vm_mac_address: "{{ vm_net0.virtio }}"
      vars:
        vm_net0: "{{ vm_config.net0 | split(',') | map('split', '=') | items2dict(key_name=0, value_name=1) }}"

    - name: Update VM disk space
      ansible.builtin.uri:
        url: "https://{{ pmox_url }}:8006/api2/json/nodes/{{ vm_data.node }}/qemu/{{ vm_data.vmid }}/resize"
        method: PUT
        validate_certs: false
        force_basic_auth: true
        headers:
          Authorization: "PVEAuthCookie={{ pmox_ticket }}"
          CSRFPreventionToken: "{{ pmox_token }}"
        body_format: json
        body:
          disk: scsi0
          size: "{{ vm_hdd_size }}"
      changed_when: true
      when: vm_scsi0_size != vm_hdd_size

    - name: Setup up kube-storage
      when: "{{ kube_storage_enabled | default(true) }}"
      block:
        - name: Get kube-storage LVM info
          ansible.builtin.uri:
            url: "https://{{ pmox_url }}:8006/api2/json/nodes/{{ vm_data.node }}/storage/{{ kube_storage_lvm }}/status"
            method: GET
            validate_certs: false
            force_basic_auth: true
            headers:
              Authorization: "PVEAuthCookie={{ pmox_ticket }}"
              CSRFPreventionToken: "{{ pmox_token }}"
          register: kube_storage_info

        - name: Mount kube-storage to VM
          ansible.builtin.uri:
            url: "https://{{ pmox_url }}:8006/api2/json/nodes/{{ vm_data.node }}/qemu/{{ vm_data.vmid }}/config"
            method: PUT
            validate_certs: false
            force_basic_auth: true
            headers:
              Authorization: "PVEAuthCookie={{ pmox_ticket }}"
              CSRFPreventionToken: "{{ pmox_token }}"
            body_format: json
            body:
              scsi1: "{{ kube_storage_lvm }}:1"
          changed_when: true
          when: not vm_scsi1_size

        - name: Update kube-storage disk space
          ansible.builtin.uri:
            url: "https://{{ pmox_url }}:8006/api2/json/nodes/{{ vm_data.node }}/qemu/{{ vm_data.vmid }}/resize"
            method: PUT
            validate_certs: false
            force_basic_auth: true
            headers:
              Authorization: "PVEAuthCookie={{ pmox_ticket }}"
              CSRFPreventionToken: "{{ pmox_token }}"
            body_format: json
            body:
              disk: scsi1
              size: "{{ size_bytes }}"
          vars:
            size_bytes: "{{ kube_storage_info.json.data.total }}"
            size_gib: "{{ (size_bytes|int / 1.074e+9) | round(2, 'floor') }}G"
          changed_when: true
          when: vm_scsi1_size != size_gib

    # - name: Share data with pihole
    #   set_fact:
    #     vm_name: "{{ vm_name }}"
    #     vm_ip_address: "{{ vm_ip_address }}"
    #     vm_mac_address: "{{ vm_mac_address }}"
    #   delegate_to: pihole.drewburr.com
    #   delegate_facts: true

# - hosts: proxmox_vm
#   gather_facts: false
#   tags:
#     - always
#     - pihole

#   tasks:
#     - name: Register DNS name
#       delegate_to: pihole.drewburr.com
#       import_role:
#         name: pihole
#         tasks_from: dns
#       vars:
#         state: present
#         dns_name: "{{ vm_dns_name }}"
#         ip_address: "{{ vm_ip_address }}"
#         fail_if_found: false

#     - name: Register DHCP address
#       delegate_to: pihole.drewburr.com
#       import_role:
#         name: pihole
#         tasks_from: dhcp
#       vars:
#         state: present
#         dns_name: "{{ vm_dns_name }}"
#         ip_address: "{{ vm_ip_address }}"
#         mac_address: "{{ vm_mac_address }}"
#         fail_if_found: false

- hosts: proxmox_vm
  connection: local
  gather_facts: false

  module_defaults:
    community.general.proxmox_kvm:
      proxmox_default_behavior: no_defaults
      api_user: "{{ pmox_user }}"
      api_password: "{{ pmox_password }}"
      api_host: "{{ pmox_url }}"

  tasks:
    - name: Set static IP on VM
      ansible.builtin.uri:
        url: "https://{{ pmox_url }}:8006/api2/json/nodes/{{ vm_data.node }}/qemu/{{ vm_data.vmid }}/config"
        method: PUT
        validate_certs: false
        force_basic_auth: true
        headers:
          Authorization: "PVEAuthCookie={{ pmox_ticket }}"
          CSRFPreventionToken: "{{ pmox_token }}"
        body_format: json
        body:
          ipconfig0: "gw={{ ipv4_gateway }},ip={{ vm_ip_address }}/{{ ipv4_cidr }}"

    - name: Start VM
      community.general.proxmox_kvm:
        name: "{{ vm_name }}"
        state: started
        timeout: 300

    - name: Wait until VM is running
      community.general.proxmox_kvm:
        name: "{{ vm_name }}"
        state: current
      register: vm_state
      until:
        - vm_state.status == "running"

- hosts: localhost
  connection: local
  gather_facts: false

  tasks:
    - name: Wait for SSH service to become available
      ansible.builtin.wait_for:
        port: 22
        host: "{{ vm_dns_name }}"
        search_regex: OpenSSH
      register: ssh_wait_res
      failed_when:
        - ssh_wait_res is failed
      vars:
        vm_name: "{{ item.name }}" # Needed to generate vm_dns_name
      loop: "{{ vms }}"

- hosts: proxmox_vm
  gather_facts: false

  tasks:
    - name: Clear host from known_host
      ansible.builtin.command:
        cmd: ssh-keygen -R "{{ vm_dns_name }}"
      vars:
        ansible_connection: local
      throttle: 1 # Avoid stepping on eachother

    - name: Install guest agent
      ansible.builtin.apt:
        name: qemu-guest-agent
      become: true
      vars:
        ansible_ssh_common_args: "-o StrictHostKeyChecking=accept-new" # Host is new. Auto-accept key
      register: agent_install_result
      until: agent_install_result is not failed
      retries: 5

    - name: Start and enable guest agent
      ansible.builtin.systemd:
        name: qemu-guest-agent
        state: started
        enabled: true
      become: true

    - name: Restart VM
      ansible.builtin.reboot:
      become: true
      throttle: 1 # Restart one host at a time
