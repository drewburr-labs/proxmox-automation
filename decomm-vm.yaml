---
# Required vars:
# vm_name - name of the VM to create
- hosts: proxmox
  connection: local
  gather_facts: false

  module_defaults:
    community.general.proxmox_kvm:
      proxmox_default_behavior: no_defaults
      api_user: "{{ pmox_user }}"
      api_password: "{{ pmox_password }}"
      api_host: "{{ pmox_url }}"
      node: "{{ vm_destination_node }}"

  tasks:
    - name: Get VM state
      community.general.proxmox_kvm:
        name: "{{ vm_name }}"
        state: current
      register: vm_state
      until:
        - not vm_state.failed

    - name: Get API ticket
      ansible.builtin.uri:
        url: "https://{{ pmox_url }}:8006/api2/json/access/ticket"
        method: POST
        validate_certs: false
        force_basic_auth: true
        body_format: json
        body:
          username: "{{ pmox_user }}"
          password: "{{ pmox_password }}"
      register: pmox_ticket_request

    - name: Register ticket
      set_fact:
        pmox_ticket: "{{ pmox_ticket_request.json.data.ticket }}"
        pmox_token: "{{ pmox_ticket_request.json.data.CSRFPreventionToken }}"

    - name: Get VM configuration
      ansible.builtin.uri:
        url: "https://{{ pmox_url }}:8006/api2/json/nodes/{{ vm_destination_node }}/qemu/{{ vm_state.vmid }}/config"
        method: GET
        validate_certs: false
        force_basic_auth: true
        headers:
          Authorization: "PVEAuthCookie={{ pmox_ticket }}"
      register: vm_config

    - name: Register VM MAC address
      set_fact:
        vm_mac_address: "{{ vm_net0.virtio }}"
      vars:
        vm_net0: "{{ vm_config.json.data.net0 | split(',') | map('split', '=') | items2dict(key_name=0, value_name=1) }}"

    - name: Share data with pihole
      set_fact:
        vm_mac_address: "{{ vm_mac_address }}"
      delegate_to: pihole.drewburr.com
      delegate_facts: true

- hosts: pihole
  gather_facts: false

  tasks:
    - name: Delete static IP
      community.docker.docker_container_exec:
        container: pihole
        command: /bin/bash -c "pihole -a removestaticdhcp {{ vm_mac_address }}"
      register: ip_reservation_result

    - name: Delete DNS record
      community.docker.docker_container_exec:
        container: pihole
        command: /bin/bash -c "pihole -a removecustomdns {{ vm_ip_address }} {{ vm_dns_name }}"
      register: dns_creation_result

- hosts: proxmox
  connection: local
  gather_facts: false

  module_defaults:
    community.general.proxmox_kvm:
      proxmox_default_behavior: no_defaults
      api_user: "{{ pmox_user }}"
      api_password: "{{ pmox_password }}"
      api_host: "{{ pmox_url }}"
      node: "{{ vm_destination_node }}"

  tasks:
    - name: Force stop VM
      community.general.proxmox_kvm:
        name: "{{ vm_name }}"
        state: stopped
        force: true

    - name: Wait until VM is fully stopped
      community.general.proxmox_kvm:
        name: "{{ vm_name }}"
        state: current
      register: vm_state
      until:
        - vm_state.status == "stopped"

    - name: Delete VM
      community.general.proxmox_kvm:
        name: "{{ vm_name }}"
        state: absent
        force: true
        timeout: 60
